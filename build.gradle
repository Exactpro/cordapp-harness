buildscript {
    def confFile = '.secrets'
    Properties conf = new Properties()
    if (file(confFile).exists()) {
        file(confFile).withInputStream { conf.load(it) }
        ext.artifactory_user = conf.getProperty("CORDA_ARTIFACTORY_USERNAME")
        ext.artifactory_password = conf.getProperty("CORDA_ARTIFACTORY_PASSWORD")
    } else {
        ext.artifactory_user = System.getenv("CORDA_ARTIFACTORY_USERNAME")
        ext.artifactory_password = System.getenv("CORDA_ARTIFACTORY_PASSWORD")
    }
    ext {
        corda_release_group = "com.r3.corda"
        corda_release_version = "4.3"
        corda_gradle_plugins_version = "5.0.6"
        quasar_version = "0.7.11_r3"   // quasar-utils plugin reads it
        log4j_version = "2.11.2"
        artifactoryUrl = "https://software.r3.com/artifactory"

        testCordapp1 = "com.exactpro.cordapp-sample:flow10:0.0.1"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "$artifactoryUrl/corda" }
    }

    dependencies {
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
      maven { url "$artifactoryUrl/corda" }
      maven { url "$artifactoryUrl/corda-enterprise"
        credentials {
          username = artifactory_user
          password = artifactory_password
        }
      }
    }
}

apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

configurations {
    bootstrapper
}

dependencies {
    runtime  "$corda_release_group:corda-node-api:$corda_release_version"
    runtime  "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordapp "$testCordapp1"
    bootstrapper("$corda_release_group:corda-tools-network-bootstrapper:$corda_release_version") { transitive = false }
}

task deployNodes(type: net.corda.plugins.Cordform) {
    nodeDefaults {
        projectCordapp { deploy = false }  // don't look for the phantom CorDapp of this project
        cordapp("$testCordapp1")
        rpcUsers = [[ user: "userN", "password": "X", "permissions": ["ALL"]]]
        extraConfig = [ 'disableFreshIdentitiesWarning': true ]
    }
 // node {
 //     name "O=Party0, L=Oulu, C=FI"
 //     p2pPort 10001
 //     rpcSettings {
 //         address("0.0.0.0:10002")
 //         adminAddress("localhost:10003")
 //     }
 // }
    node {  // dare try L=KÃ¸benhavn ?
        name "O=Party1, L=Rome, C=IT" // cordform 5.0.6 swallows whitespace: "O=Party 1,.." -> nodes/Party1
        p2pPort 10011
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("localhost:10013")
        }
    }
    node {
        name "O=Party2, L=Oslo, C=NO"
        p2pPort 10021
        rpcSettings {
            address("0.0.0.0:10022")
            adminAddress("localhost:10023")
        }
    }
    node {
        name "O=Party3, L=Kiev, C=UA"
        p2pPort 10031
        rpcSettings {
            address("0.0.0.0:10032")
            adminAddress("localhost:10033")
        }
    }
 // node {
 //     name "O=Party4, L=Baku, C=AZ"
 //     p2pPort 10041
 //     rpcSettings {
 //         address("0.0.0.0:10042")
 //         adminAddress("localhost:10043")
 //     }
 // }
 // node {
 //     name "O=Party5, L=Riga, C=LT"
 //     p2pPort 10051
 //     rpcSettings {
 //         address("0.0.0.0:10052")
 //         adminAddress("localhost:10053")
 //     }
 // }
 // node {
 //     name "O=Party6, L=Lima, C=PE"
 //     p2pPort 10061
 //     rpcSettings {
 //         address("0.0.0.0:10062")
 //         adminAddress("localhost:10063")
 //     }
 // }
 // node {
 //     name "O=Party7, L=Suva, C=FJ"
 //     p2pPort 10071
 //     rpcSettings {
 //         address("0.0.0.0:10072")
 //         adminAddress("localhost:10073")
 //     }
 // }
 // node {
 //     name "O=Party8, L=Doha, C=QA"
 //     p2pPort 10081
 //     rpcSettings {
 //         address("0.0.0.0:10082")
 //         adminAddress("localhost:10083")
 //     }
 // }
 // node {
 //     name "O=Party9, L=Bern, C=CH"
 //     p2pPort 10091
 //     rpcSettings {
 //         address("0.0.0.0:10092")
 //         adminAddress("localhost:10093")
 //     }
 // }
 // node {
 //     name "O=PartyA, L=Oulu, C=FI"
 //     p2pPort 10006
 //     rpcSettings {
 //         address("0.0.0.0:10007")
 //         adminAddress("localhost:10008")
 //     }
 // }
 // node {
 //     name "O=PartyB, L=Rome, C=IT"
 //     p2pPort 10016
 //     rpcSettings {
 //         address("0.0.0.0:10017")
 //         adminAddress("localhost:10018")
 //     }
 // }
}

// lib/quasar.jar is for runtime instrumentation of classes by Quasar.
// When running corda outside of the given gradle building you must add
// the following flag with the correct path to your call to Java:
// java -javaagent:path-to-quasar-jar.jar ...
// See Quasar docs at docs.paralleluniverse.co/quasar/
task putQuasar(type: Copy) {
    into rootProject.file("lib")
    from(configurations.quasar) {  // quasar-utils plugin adds 'quasar' configuration
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

task putBootstrapper(type: Copy) {
    into rootProject.file("lib")
    from(configurations.bootstrapper) {
        rename 'corda-tools-network-bootstrapper(-.*).jar', 'corda-bootstrapper.jar'
    }
}

clean {
    dependsOn = [ cleanPutBootstrapper,
        cleanPutQuasar,
    ]
}

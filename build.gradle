buildscript {
    def confFile = '.secrets'
    Properties conf = new Properties()
    if (file(confFile).exists()) {
        file(confFile).withInputStream { conf.load(it) }
        ext.artifactory_user = conf.getProperty("CORDA_ARTIFACTORY_USERNAME")
        ext.artifactory_password = conf.getProperty("CORDA_ARTIFACTORY_PASSWORD")
    } else {
        ext.artifactory_user = System.getenv("CORDA_ARTIFACTORY_USERNAME")
        ext.artifactory_password = System.getenv("CORDA_ARTIFACTORY_PASSWORD")
    }
    ext {
        corda_release_group = "com.r3.corda"
        corda_release_version = "4.3"
        corda_gradle_plugins_version = "5.0.6"
        quasar_version = "0.7.11_r3"
        log4j_version = "2.11.2"
        slf4j_version = "1.7.25"
        corda_platform_version = 5
        artifactoryUrl = "https://software.r3.com/artifactory"

        testCordapp1 = "com.exactpro.cordapp-sample:flow10:0.0.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "$artifactoryUrl/corda" }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
      mavenLocal()
      mavenCentral()
      jcenter()
      maven { url "$artifactoryUrl/corda" }
      maven { url "$artifactoryUrl/corda-enterprise"
        credentials {
          username = artifactory_user
          password = artifactory_password
        }
      }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

// this is a fictional cordapp of this project
// it's harmless, though it's reported as a loaded cordapp
// to fix that add 'projectCordapp { deploy = false }' in node {}
cordapp {
    // silence a [jar] task warning
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "project"
        vendor "Exactpro"
        licence "Apache-2.0"
        versionId 1
    }
}

dependencies {
    cordaRuntime "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    cordapp "$testCordapp1"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp { deploy = false }
        cordapp("$testCordapp1")
        rpcUsers = [[ user: "userN", "password": "X", "permissions": ["ALL"]]]
        extraConfig = [ 'disableFreshIdentitiesWarning': true ]
    }
    node {              // KÃ¸benhavn
        name "O=Party0, L=Copenhagen, C=DK" // cordform 5.0.6 swallows whitespace in O=
        p2pPort 10001                       // O=Party 0,.. goes to nodes/Party0/
        rpcSettings {
            address("0.0.0.0:10002")
            adminAddress("localhost:10003")
        }
    }
    node {
        name "O=Party1, L=Prague, C=CZ"
        p2pPort 10011
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("localhost:10013")
        }
    }
    node {
        name "O=Party2, L=Prague, C=CZ"
        p2pPort 10021
        rpcSettings {
            address("0.0.0.0:10022")
            adminAddress("localhost:10023")
        }
    }
    node {
        name "O=Party3, L=Prague, C=CZ"
        p2pPort 10031
        rpcSettings {
            address("0.0.0.0:10032")
            adminAddress("localhost:10033")
        }
    }
    node {
        name "O=Party4, L=Prague, C=CZ"
        p2pPort 10041
        rpcSettings {
            address("0.0.0.0:10042")
            adminAddress("localhost:10043")
        }
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
